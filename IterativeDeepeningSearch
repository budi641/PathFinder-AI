import time
from collections import deque
import heapq




class IterativeDeepeningSearch:
    def __init__(self, start_state, goal_state, grid):
        self.start_state = start_state
        self.goal_state = goal_state
        self.grid = grid

    def search(self):
        depth = 0
        while True:
            
            result = self.depth_limited_search(self.start_state, depth)
            if result is not None:
                return result, depth 
            depth += 1

    def depth_limited_search(self, state, limit):
        return self.recursive_dls(state, limit, set(), [state])

    def recursive_dls(self, state, limit, visited, path):
        if state.is_goal(self.goal_state):
            return path 

        if limit == 0:
            return None

       
        visited.add((state.x, state.y, frozenset(state.collected_items)))

        for neighbor in state.get_neighbors(self.grid):
            key = (neighbor.x, neighbor.y, frozenset(neighbor.collected_items))
            if key not in visited:
              
                result = self.recursive_dls(neighbor, limit - 1, visited, path + [neighbor])
                if result is not None:
                    return result

        visited.remove((state.x, state.y, frozenset(state.collected_items)))
        return None

grid = Grid(size=5, obstacles={(1, 1), (2, 2)}, collectibles={(0, 1), (1, 2)})
start_state = State(0, 0)
goal_state = State(4, 4)

start_time = time.time()
ids = IterativeDeepeningSearch(start_state, goal_state, grid)


result, depth = ids.search()
elapsed_time = time.time() - start_time


print("elapsed time: ", elapsed_time)
if result:
    print(f"Goal reached at depth {depth}! Path:")
    for state in result:
        print(state)
else:
    print("No path to goal found.")
